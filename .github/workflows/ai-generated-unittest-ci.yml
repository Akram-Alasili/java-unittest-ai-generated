name: AI-Generated Unit Tests CI
# Trigger on push or pull request to the main branch,

on:
  push:
    branches:
      - main
    paths:
      - 'ai-generation-unittest/**'
      - '.github/workflows/ai-generated-unittest-ci.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'ai-generation-unittest/**'
      - '.github/workflows/ai-generated-unittest-ci.yml'


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 11
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'adopt'

      # Step 3: Cache Maven packages to speed up build
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('ai-generation-unittest/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 5: Install dependencies and build the project without running tests
      - name: Install dependencies and build
        run: mvn -B install -DskipTests --file ai-generation-unittest/pom.xml

      # Step 6: Upload build artifacts for subsequent jobs
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ai-generation-unittest
          if-no-files-found: error

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Download build artifacts from build job
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ai-generation-unittest

      # Step 2: Set up JDK 8
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'adopt'

      # Step 3: Cache Maven packages
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('ai-generation-unittest/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Run tests and generate the JaCoCo coverage report  
      - name: Run tests and generate coverage report
        run: mvn test jacoco:report --file ai-generation-unittest/pom.xml

      # Step 5: Upload the JaCoCo coverage report as an artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: ai-generated-unittest-jacoco-report
          path: ai-generation-unittest/target/site/jacoco
          if-no-files-found: warn

      # Step 6: Set up JDK 11 for Mutation Testing and PMD
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      # Step 7: Run PIT Mutation Testing with Debug Logging
      - name: Run PIT Mutation Testing
        run: mvn -X org.pitest:pitest-maven:mutationCoverage --file ai-generation-unittest/pom.xml
        
      # Step 8: Upload the PIT Mutation Testing report as an artifact
      - name: Upload PIT mutation report
        uses: actions/upload-artifact@v4
        with:
          name: ai-generated-unittest-pit-report
          path: ai-generation-unittest/target/pit-reports
          if-no-files-found: warn

      # Step 9: Run PMD analysis
      - name: Run PMD Analysis
        run: mvn pmd:check --file ai-generation-unittest/pom.xml

      # Step 10: Upload PMD report as an artifact
      - name: Upload PMD report
        uses: actions/upload-artifact@v4
        with:
          name: ai-generated-unittest-pmd-report
          path: |
            ai-generation-unittest/target/pmd-reports
            ai-generation-unittest/target/pmd.xml
          if-no-files-found: warn
